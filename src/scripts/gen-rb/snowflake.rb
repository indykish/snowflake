#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'snowflake_types'

module Snowflake
  class Client
    include ::Thrift::Client

    def get_worker_id()
      send_get_worker_id()
      return recv_get_worker_id()
    end

    def send_get_worker_id()
      send_message('get_worker_id', Get_worker_id_args)
    end

    def recv_get_worker_id()
      result = receive_message(Get_worker_id_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_worker_id failed: unknown result')
    end

    def get_timestamp()
      send_get_timestamp()
      return recv_get_timestamp()
    end

    def send_get_timestamp()
      send_message('get_timestamp', Get_timestamp_args)
    end

    def recv_get_timestamp()
      result = receive_message(Get_timestamp_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_timestamp failed: unknown result')
    end

    def get_id(useragent)
      send_get_id(useragent)
      return recv_get_id()
    end

    def send_get_id(useragent)
      send_message('get_id', Get_id_args, :useragent => useragent)
    end

    def recv_get_id()
      result = receive_message(Get_id_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_id failed: unknown result')
    end

    def get_datacenter_id()
      send_get_datacenter_id()
      return recv_get_datacenter_id()
    end

    def send_get_datacenter_id()
      send_message('get_datacenter_id', Get_datacenter_id_args)
    end

    def recv_get_datacenter_id()
      result = receive_message(Get_datacenter_id_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_datacenter_id failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_get_worker_id(seqid, iprot, oprot)
      args = read_args(iprot, Get_worker_id_args)
      result = Get_worker_id_result.new()
      result.success = @handler.get_worker_id()
      write_result(result, oprot, 'get_worker_id', seqid)
    end

    def process_get_timestamp(seqid, iprot, oprot)
      args = read_args(iprot, Get_timestamp_args)
      result = Get_timestamp_result.new()
      result.success = @handler.get_timestamp()
      write_result(result, oprot, 'get_timestamp', seqid)
    end

    def process_get_id(seqid, iprot, oprot)
      args = read_args(iprot, Get_id_args)
      result = Get_id_result.new()
      result.success = @handler.get_id(args.useragent)
      write_result(result, oprot, 'get_id', seqid)
    end

    def process_get_datacenter_id(seqid, iprot, oprot)
      args = read_args(iprot, Get_datacenter_id_args)
      result = Get_datacenter_id_result.new()
      result.success = @handler.get_datacenter_id()
      write_result(result, oprot, 'get_datacenter_id', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Get_worker_id_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_worker_id_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_timestamp_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_timestamp_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_id_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERAGENT = 1

    FIELDS = {
      USERAGENT => {:type => ::Thrift::Types::STRING, :name => 'useragent'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_id_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_datacenter_id_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_datacenter_id_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

